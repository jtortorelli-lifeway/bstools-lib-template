apply plugin: 'groovy'
apply plugin: 'eclipse'

sourceCompatibility = 1.8

// GRADLE-2087 workaround, perform after java plugin
status = project.hasProperty('preferredStatus')?project.preferredStatus:(version.contains('SNAPSHOT')?'snapshot':'release')

// Indenting to align with multi-project branch
    task sourcesJar(type: Jar, dependsOn:classes) {
        from sourceSets.main.allSource
        classifier 'sources'
        extension 'jar'
    }

    task javadocJar(type: Jar) {
        from javadoc.destinationDir
        classifier 'javadoc'
        extension 'jar'
    }

	configurations.all {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
	}

  configurations.create('sources')
  configurations.create('javadoc')
  configurations.archives {
      extendsFrom configurations.sources
      extendsFrom configurations.javadoc
  }

  artifacts {
      sources(sourcesJar) {
          // Weird Gradle quirk where type will be used for the extension, but only for sources
          type 'jar'
      }
      javadoc(javadocJar) {
          type 'javadoc'
      }
  }

  configurations {
      provided {
          description = 'much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive.'
          transitive = true
          visible = true
      }
  }

  project.sourceSets {
      main.compileClasspath += project.configurations.provided
      main.runtimeClasspath -= project.configurations.provided
      test.compileClasspath += project.configurations.provided
      test.runtimeClasspath += project.configurations.provided
      eclipse.classpath.plusConfigurations += project.configurations.provided
  }

//Add groovy for Spock testing but make sure it doesn't go into the artifact.
//configurations.compile.extendsFrom = [] // undo what Groovy plugin does
//configurations.testCompile.extendsFrom(configurations.groovy)

task createSourceDirs << {
  sourceSets.all { set -> set.allSource.srcDirs.each{it.mkdirs() } }
}

// Generate wrapper, which is distributed as part of source to alleviate the need of installing gradle
task createWrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
